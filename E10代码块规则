1.1获取sdk对象实例getWeFormInstance()
参数说明
moduleKey：string，模块或模块标识
formId：string，表单id
dataId：string，表单数据id

返回值：当前页面SDK
示例
// 注: 这是初始化完成回调，同jQuery的onload
pageSdk.on('formReady',(args)=>{
    //获取最上层活动窗口的实例
    1、window.WeFormSDK.getWeFormInstance()  
    //获取以moduleKey为隔离的最上层活动窗口实例
    2、window.WeFormSDK.getWeFormInstance(moduleKey)
    //获取以moduleKey和formId为隔离的最上层活动窗口实例
    3、window.WeFormSDK.getWeFormInstance(moduleKey, formId)
    //获取以moduleKey、formId和dataId为隔离的最上层活动窗口实例
    4、window.WeFormSDK.getWeFormInstance(moduleKey, formId, dataId)
    注：E10单个页面，可能会打开多份表单，有条件的情况下，建议使用粒度细的方式，以避免出现获取到其他表单的实例
});
1.2表单加载完成回调事件window.ebuilderSDK.getPageSDK().on('formReady',(args)=>{})
 
示例
// 通过Eb绑定异步回调，类似于jquery.onLoad; 参考以下两种形式
1、pageSdk.on('formReady', (args) => {console.log(args)});
2、const pageSdk = window.ebuilderSDK.getPageSDK();pageSdk.on('formReady', (args) => {console.log(args)});
3、window.ebuilderSDK.getPageSDK().on('formReady',(args)=>{console.log(args)});

2.1 注册拦截事件，指定动作执行前触发，并可阻断/放行后续操作registerCheckEvent(type: string, fun: (successFn: Function, failFn: Function) => void): void;
参数说明
fun：Function，自定义函数，此函数入参为callback，执行自定义逻辑完成或异步ajax的success函数体内，放行需调用callback，不调用代表阻断后续操作。注：一定要调用成功或者失败。
type：string，必需，动作类型参考下方，多个逗号相隔。

动作类型
WeFormSDK.OPER_SAVE：保存，注：这个是表单的数据保存，如果需要操作模块按钮，请使用模块SDK提供的事件 审批文档地址：https://weapp.eteams.cn/sp/techdoc/view/716154026911416320/720609767701430272|。
WeFormSDK.OPER_ADDROW：添加明细行，需拼明细表标识fieldMark
WeFormSDK.OPER_DELROW：删除明细行，需拼明细表标识fieldMark
WeFormSDK.OPER_BEFOREVERIFY：校验必填前触发事件

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 注册保存事件
    weFormSdk.registerCheckEvent(window.WeFormSDK.OPER_SAVE, (successFn: Function, failFn: Function)=>{
        // ...执行定义逻辑
        // 如果是移动端，则向下调用，如果非移动端则阻塞调用
        window.WeFormSDK.isMobile() ? successFn() : failFn();
    });
    // 明细表添加行事件
    // 根据dataKey获取明细表标识
    const detailMark = weFormSdk.convertFieldNameToId("mxbo16sr2", "main", true);
    weFormSdk.registerCheckEvent(`${window.WeFormSDK.OPER_ADDROW}${detailMark}`, (successFn: Function, failFn: Function)=>{
        // ...执行定义逻辑
        // 如果是移动端，则允许添加，非移动端阻塞添加
        window.WeFormSDK.isMobile() ? successFn() : failFn();


2.2 注册钩子事件，指定动作完成后触发registerAction(type: string, fun: (data: any) => void): void;
参数说明
fun：Function，触发事件，参数data：any类型
type：string，必需，动作类型详见下方

动作类型
WeFormSDK.ACTION_ADDROW：添加明细行，需拼明细表标识fieldMark
WeFormSDK.ACTION_DELROW：删除明细行，需拼明细表标识fieldMark
WeFormSDK.ACTION_FORM_SUBMIT：表单提交完成回调
WeFormSDK.ACTION_FORM_SAVE：表单保存完成回调
WeFormSDK.ACTION_DATA_LINKAGE：数据联动执行后
WeFormSDK.ACTION_DATA_RELATE：数据钻取执行后（关联表字段、字段函数、运算）

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    const detailMark = weFormSdk.convertFieldNameToId("mxbo16sr2", "main", true);
    // 明细表添加行事件，index为添加行下标，从0开始
    weFormSdk.registerAction(`${window.WeFormSDK.ACTION_ADDROW}${detailMark}`, (rowIds, data)=>{
        // ...execute custom
        console.log("添加行下标是"+rowIds);
        console.log(data);
    });
    // 明细表删除行事件，arg为删除上下标集合，从0开始
    weFormSdk.registerAction(`${window.WeFormSDK.ACTION_DELROW}${detailMark}`, (rowIds, data)=>{
        // ...execute custom
        console.log("删除行下标是"+rowIds.join(","));
        console.log(data);
    });
3.1 将字段名称转换成字段idconvertFieldNameToId(fieldName: string, symbol?: string, prefix?: boolean): string;
参数说明
fieldName：string，必需，表单字段datakey
symbol：string，表单标示，主表（main）/具体明细表（datailMark）;注：key不重复的情况下，可以简化该参数
prefix：boolean，返回值是否需要废了字符串前缀，默认为true

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取字段的fieldId
    const fieldMark = weFormSdk.convertFieldNameToId("wbk");
    // 获取明细字段的fieldId
    const detailFieldMark = weFormSdk.convertFieldNameToId("mx_wbk");
 
    // 如果数据key有重复的, 参考这个示例
    // 获取主表字段fieldId, symbol: "main"
    const fieldMark = weFormSdk.convertFieldNameToId("wbk", "main");
    // 获取明细表的Id
    const detailMark = weFormSdk.convertFieldNameToId("mxbo16sr2");
    // 下的明细字段fieldId
    const detailFieldMark = weFormSdk.convertFieldNameToId("wbk", detailMark);

3.2 获取单个字段值getFieldValue: (fieldMark: string) => any;
参数说明
fieldmark：string，必需，字段Id，字段表示，格式为：{字段Id}、{字段Id}_{明细行Id}

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段fieldId
    const fieldMark = weFormSdk.convertFieldNameToId("wbk");
    // 获取字段值
    const fieldValue = weFormSdk.getFieldValue(fieldMark);
    // 文本输入内容，选项型返回选项id
    console.log(fieldValue);
 
    // 获取明细行的字段值
    // 获取明细字段fieldId
    const mxFieldMark = weFormSdk.convertFieldNameToId("mx_wbk");
    // 获取明细表fieldId
    const detailMark = weFormSdk.convertFieldNameToId("mxbo16sr2");
    // 获取第一行的rowId
    const oneRowId = weFormSdk.getDetailRowIdByIndex(detailMark, 1);
    // 获取明细字段的指定行， 注：示例用的ES6拼接字符串
    weFormSdk.getFieldValue(`${mxFieldMark}_${oneRowId}`);

3.3 修改单个字段值changeFieldValue: (fieldMark: string, valueInfo: any) => void;
参数说明
fieldMark：string，必需，字段I的、字段标识，格式为：{字段Id}、{字段Id}、{明细行Id}
valueInfo：object，必需，字段值信息，非关联、浏览按钮字段格式为：“修改的值”，value为string类型：specialObj为浏览按钮信息，数组格式，如：[{id:"71897431289"，name:"report demo1"}]

valueinfo
value：string，修改的值，文本型
specialObj：Array，浏览按钮信息，数组格式，如：[{id:"785457897"},name:"report demo1"]
longitude：number，地理位置，经度
latitude：number，地理位置，纬度

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 修改文本型-单行文本字段
    const textFieldMark = weFormSdk.convertFieldNameToId('dhwbk');
    weFormSdk.changeFieldValue(textFieldMark, {value: "Single line text content"});
 
    // 修改选项型-下拉框字段
    const selectFieldMark = weFormSdk.convertFieldNameToId('xlk');
    weFormSdk.changeFieldValue(selectFieldMark, {value: "4765016625940566613"});
 
    // 修改选项型-多级下拉字段, 对应选项1、选项11的选项id值
    const multSelectFieldMark = weFormSdk.convertFieldNameToId('djxlk');
    weFormSdk.changeFieldValue(multSelectFieldMark, {value: "4765016625951366628,4765016625951966629"});
 
    // 修改日期类型，日期区间格式为"2022-4-23,2022-4-25"
    const dateFieldMark = weFormSdk.convertFieldNameToId('rqxz');
    weFormSdk.changeFieldValue(dateFieldMark, {value: "2022-4-23"});
 
    // 浏览按钮类型
    const browserFieldMark = weFormSdk.convertFieldNameToId('glsb');
    weFormSdk.changeFieldValue(browserFieldMark, {specialObj: [{id: "718974312893816832", name: "report demo1"},{id: "718974312893816833", name: "report demo2"}]});
       
 
    // 修改明细行的字段值
    // 获取明细字段fieldId
    const mxFieldMark = weFormSdk.convertFieldNameToId("mx_wbk");
    // 获取明细表fieldId
    const detailMark = weFormSdk.convertFieldNameToId("mxbo16sr2");
    // 获取第一行的rowId
    const oneRowId = weFormSdk.getDetailRowIdByIndex(detailMark, 1);
    // 修改指定明细行的内容， 注：示例用的ES6拼接字符串
    weFormSdk.changeFieldValue(`${mxFieldMark}_${oneRowId}`,{value: "Single line text content"});

3.4 改变单个字段显示属性(只读/必填等)changeFieldAttr: (fieldMark: string, viewAttr: number) => void;
参数说明
fieldMark：string，必需，字段Id、字段标识，格式为：{字段Id}、{字段Id}_{明细行Id}
viewAttr：Number，必需，改变字段的状态，1：只读；2：可编辑；3：必填；4：隐藏；5：隐藏行

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取字段fieldId
    const fieldMark = weFormSdk.convertFieldNameToId("wbk");
    // 设置为只读
    weFormSdk.changeFieldAttr(fieldMark, 1);
    // 设置为编辑
    weFormSdk.changeFieldAttr(fieldMark, 2);
    // 设置为必填
    weFormSdk.changeFieldAttr(fieldMark, 3);
    // 设置为隐藏
    weFormSdk.changeFieldAttr(fieldMark, 4);
    // 设置为隐藏、隐藏行
    weFormSdk.changeFieldAttr(fieldMark, 5);

3.5 同时修改字段的值及显示属性changeSingleField: (fieldMark: string, valueInfo: any, variableInfo?: any) => void;
参数说明
fieldMark：string，必需，字段Id、字段标识，格式为：{字段Id}、{字段Id}_{明细行Id}
valueInfo：object，必需，字段值信息，与接口3.2格式一致，例：{value:"修改的值"}
variableInfo：object，变更属性，例：{viewAttr：3}，值与3.4一致

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段fieldId
    const fieldMark = weFormSdk.convertFieldNameToId("wbk");
    // 仅修改内容
    weFormSdk.changeSingleField(fieldMark, {value: "Only modify the text content"});
    // 同时修改内容与属性
    weFormSdk.changeSingleField(fieldMark, {value: "Text content modification"}, {viewAttr: 3});
3.6 批量修改字段值或显示属性changeMoreField: (changeDatas: any, changeVariable?: any) => void;
参数说明
changeDates：object，必需，修改的字段值信息集合
changeVariable：object，修改的字段显示属性集合

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段fieldId
    const textFieldMark = weFormSdk.convertFieldNameToId("wbk");
    const selectFieldMark = weFormSdk.convertFieldNameToId("xlk");
    // 批量修改
    const changeDatas = {
        [textFieldMark]: {value: "text content"},
        [selectFieldMark]: {value: "4765016625940566613"}
    }
    const changeVariable = {
        [textFieldMark]: {viewAttr: 2},
        [selectFieldMark]: {viewAttr: 3}
    }
    weFormSdk.changeMoreField(changeDatas, changeVariable);
3.7 根据字段ID获取字段信息getFieldInfo: (fieldMark: string) => void;
参数说明
fieldMark：string，必需，字段Id，字段标识，格式为：{字段Id}

返回值
fieldId：string，字段Id
dataKey：string，字段名称
name：string，字段名称
componentKey：string，字段key标识
inSingle：boolean，是否单选
readOnly：boolean，是否只读
required：boolean，是否必填

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段fieldId
    const textFieldMark = weFormSdk.convertFieldNameToId("wbk");
    const fieldInfo = weFormSdk.getFieldInfo(textFieldMark);
    // id、title、componentKey、required...
    console.log(fieldInfo);
3.8 获取表单下所有字段listFieldInfo(): any;
返回值
fieldId：string，字段Id
dataKey：string，字段可见的key标记，3.1使用
name：string，字段名称
componentKey：string，字段key标识
inSingle：boolean，是否单选
readOnly：boolean，是否只读
required：boolean，是否必填

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取所有字段
    const fieldInfos = weFormSdk.listFieldInfo();
    console.log(fieldInfos);

3.9 触发指定字段涉及的所有联动triggerFieldAllLinkage(): any;
说明
手动触发一次字段涉及的所有联动，包括字段联动、函数公式、显示属性联动、数据钻取、选择框联动、bindPropertyChange事件绑定等; 注：触发类型为值变更触发; 如果是明细字段，需要指定触发行;

参数说明
fieldMark：string，必需，字段Id、字段I的，字段标识，格式为：{字段Id}、{字段Id}_{明细行Id}

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段    const fieldMark = weFormSdk.convertFieldNameToId("wbk");
    // 触发该字段的联动    weFormSdk.triggerFieldAllLinkage(fieldMark);
 
    // 获取明细字段
    const mxFieldMark = weFormSdk.convertFieldNameToId("mx_wbk");
    // 获取明细表id
    const detailMark = weFormSdk.convertFieldNameToId("mxbo16sr2");
    // 获取第一行的rowId
    const oneRowId = weFormSdk.getDetailRowIdByIndex(detailMark, 1);
    // 触发该明细字段指定行的联动    weFormSdk.triggerFieldAllLinkage(`${mxFieldMark}_${oneRowId}`);
    console.log(fieldInfos);
3.10 获取单个字段的读写属性(只读/必填等)getFieldAttr(fieldMark: string): number;
参数说明
fieldMark：string，必需，字段Id，字段标识，格式为：{字段Id}，{字段Id}_{明细行Id}

返回值
字段的状态，1：只读，2：可编辑，3：必填，4: 隐藏，5: 隐藏行

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段
    const fieldMark = weFormSdk.convertFieldNameToId("wbk");
    // 获取该字段的读写属性
    weFormSdk.getFieldAttr(fieldMark);
    // 获取明细字段
    const mxFieldMark = weFormSdk.convertFieldNameToId("mx_wbk");
    // 获取明细表id
    const detailMark = weFormSdk.convertFieldNameToId("mxbo16sr2");
    // 获取第一行的rowId
    const oneRowId = weFormSdk.getDetailRowIdByIndex(detailMark, 1);
    // 获取该明细字段指定行的读写属性
    weFormSdk.getFieldAttr(`${mxFieldMark}_${oneRowId}`);

4.1 表单字段值变化触发事件bindFieldChangeEvent: (fieldMarkStr: any, fun: (id?: string, value?: string) => void) => void;
参数说明
fieldMark：string，必需，字段Id，字段标识，格式为：{字段Id}、{字段Id}_{明细行Id}，多个字段使用‘,’分割
fun：function，必需，字段值变化触发的自定义函数，函数默认传递以下参数：data{id:fieldMark,value:修改后的值}

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段fieldId
    const textFieldMark = weFormSdk.convertFieldNameToId("wbk");
    const selectFieldMark = weFormSdk.convertFieldNameToId("xlk");
    // 绑定事件，对主表字段和明细表的某一行绑定
    weFormSdk.bindFieldChangeEvent(`${textFieldMark},${selectFieldMark}`, (data) => {
        // 取字段标识
        const fieldMark = data.id;
        // 取字段修改的值
        const value = data.value;
        console.log(data);
    });
4.2 明细字段值变化触发事件bindDetailFieldChangeEvent: (fieldMarkStr: string, fun: (data: any) => void) => void;
参数说明
fieldMrakStr：string，必需，字段Id，字段标识，格式为：{字段Id}、{字段Id}_{明细行Id}，多个字段使用‘,’分割
fun：function，必需，字段值变化触发的自定义函数，函数默认传递以下参数，data:{id:fieldMark,value:context}

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段fieldId
    const textFieldMark = weFormSdk.convertFieldNameToId("wbk");
    const selectFieldMark = weFormSdk.convertFieldNameToId("xlk");
    // 绑定事件，对明细表整列字段绑定
    weFormSdk.bindDetailFieldChangeEvent(`${textFieldMark},${selectFieldMark}`, (data) => {
        // 取字段标识
        const fieldMark = data.id;
        // 取字段修改的值
        const value = data.value;
        // 修改行号
        const rowId = data.rowId;
        console.log(data);
    });
4.3 字段区域绑定动作事件bindFieldAction: (type: "onblur" | "onfocus" | "onclick" | "ondbclick" | "mouseover" | "mouseout", fieldMarkStr: string, fun: (data: any) => void) => void;
参数说明
type：string，必需，动作类型
fieldMarkStr：string，必需，字段Id，字段标识，格式为：{字段Id}、{字段Id}_{明细行Id}，多个字段使用“,”分隔
fun：function，必需，字段值的变化触发的自定函数，函数默认传递以下参数，data:{id:fieldMark,value:context}

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段fieldId
    const textFieldMark = weFormSdk.convertFieldNameToId("wbk");
    const selectFieldMark = weFormSdk.convertFieldNameToId("xlk");
    // 绑定事件，对明细表整列字段绑定
    weFormSdk.bindFieldAction("onblur", `${textFieldMark},${selectFieldMark}`, (data) => {
        // 取字段标识
        const fieldMark = data.id;
        // 取字段修改的值
        const value = data.value;
        // 修改行号
        const rowId = data.rowId;
        console.log(data);
    });

4.4 自定义渲染表单字段proxyFieldComp(fieldMark: string, el: React.Component, range: string | undefined): void;
参数说明
fieldMark：string，必需，字段Id、字段标识，格式为：{字段Id}、{字段Id}_{明细行Id}
el：react.conponent，必需，渲染的组件，建议用react，js语法请自行查询
range：string，作用范围，默认全部，（1：只读；2：可编辑；3：必填），组合后逗号分隔

返回值
void

示例
   // 获取表单实例
   const weFormSdk = window.WeFormSDK.getWeFormInstance();
   // 获取主表字段的fieldId
   const fieldMark = weFormSdk.convertFieldNameToId('dxwb_md31');
   // 复写指定组件，全部状态, 用react
   weFormSdk.proxyFieldComp(fieldMark, React.createElement('div', {fieldMark}, "Copy the content of a multiline text component"));
   // 复写编辑状态下的组件，用html格式
   weFormSdk.proxyFieldComp(fieldMark, "Copy the content of a multiline text component", '2');
   // 复写明细字段，指定行复写
   // 获取明细表fieldId
   const detailMark = weFormSdk.convertFieldNameToId('mx_detail_dt1');
   // 获取第一行的行Id、rowId
   const detailRowId = weFormSdk.getDetailRowIdByIndex(detailMark, 1);
   // 获取主表字段的fieldId
   const fieldMark = weFormSdk.convertFieldNameToId('mx_dxwb_md31');
   // 复写指定行的组件，全部状态, 用react; 注：以下示例为ES6语法的拼接字符串，等同于 fieldMark"_"+detailRowId"
   weFormSdk.proxyFieldComp(`${fieldMark}_${detailRowId}`, React.createElement('div', {fieldMark}, "Copy the content of a multiline text component"));
 
4.5 自定义追加渲染表单字段afterFieldComp(fieldMark: string, el: React.Component, range: string | undefined): void;
参数说明
fieldMark：string，必需，字段Id，字段标识，格式为：{字段Id}，{字段Id}_{明细行Id}，注：明细字段不传行号，为整列生效
el：react.conponent，必需，渲染的组件，建议用react
range：string，作用范围，默认全部，（1：只读；2：可编辑；3：必填），组合后逗号分隔

返回值
void

示例
   // 获取表单实例
   const weFormSdk = window.WeFormSDK.getWeFormInstance();
   // 复写组件
   const fieldMark = weFormSdk.convertFieldNameToId('dxwb_md31');
   // 指定组件后追加，全部状态, 用react
   weFormSdk.afterFieldComp(fieldMark, React.createElement('div', {fieldMark}, "Append the content of the multiline text component"));
   // 编辑状态下的组件追加，用html格式
   weFormSdk.afterFieldComp(fieldMark, "Append the content of the multiline text component", '2');
   // 明细字段的示例，参考4.4的明细字段
4.6 函数式自定义渲染表单字段proxyFieldContentComp(fieldMark: string, fun: any): void;
参数说明
fieldMark：string，必需，字段Id，字段标识，格式为：{字段Id}，{字段Id}_{明细行Id}，注：明细字段不传行号，为整列生效
fun：function，必需，代理的函数，此函数必须有返回值，返回自定义渲染的组件info字段基础信息，包括字段值、字段属性等等 compFn代理前原字段组件函数，可通过此函数获取原组件

返回值
void

示例
   // 获取表单实例
   const weFormSdk = window.WeFormSDK.getWeFormInstance();
   // 复写组件
   const fieldMark = weFormSdk.convertFieldNameToId('dxwb_md31');
   // 用函数式，可根据条件控制渲染组件
   weFormSdk.proxyFieldContentComp(fieldMark, (props, component)=>{
       return React.createElement('div', {fieldMark}, "Function rendering the content of a multiline text component");
   });
   // 明细字段的示例，参考4.4的明细字段
5.1 添加明细行并设置初始值addDetailRow: (detailMark: string, initAddRowData?: any) => void;
参数说明
detailMark：string，必填，明细表Id，明细表标识
initAddRowData：object，必需，给新增后设置初始值，格式与3.2一致

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段fieldId
    const detailMark = weFormSdk.convertFieldNameToId("mxbo16sr2");
    // 获取明细表字段fieldId
    const detailFieldMark = weFormSdk.convertFieldNameToId("dhwb_12sr2");
    // 添加行并设置默认值
    weFormSdk.addDetailRow(detailMark, {[detailFieldMark]: {value: "context"}})
5.2 删除明细表指定行/全部行delDetailRow: (detailMark: string, rowIdMark: string) => void;
参数说明
detailMark：string，必需，明细表Id，明细表标识
rowIdMark：string，必需，需要删除的行标示，删除全部行：all，删除部分行

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段fieldId
    const detailMark = weFormSdk.convertFieldNameToId("mxbo16sr2");
    // 删除行号,根据rowId
    weFormSdk.delDetailRow(detailMark, "17866566556566");
    // 删除全部行
    weFormSdk.delDetailRow(detailMark, "all");

5.3 获取明细行所有行IdgetDetailAllRowIndexStr: (detailMark: string) => string;
参数说明
detailMark：string，必需，明细表Id、明细表标识

返回值
string

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段fieldId
    const detailMark = weFormSdk.convertFieldNameToId("mxbo16sr2");
    // 获取明细行标识、明细行Id、rowId
    const rowIdStr = weFormSdk.getDetailAllRowIndexStr(detailMark);
    // 803945585040474130,803945585040474136,803945585040474142
    console.log(rowIdStr);

5.4 获取明细总行数getDetailRowCount(detailMark: string): string;
参数说明
detailMark：string，必需，明细表Id，明细表标识

返回值
number
示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段fieldId
    const detailMark = weFormSdk.convertFieldNameToId("mxbo16sr2");
    // 3
    const detailRowStr = weFormSdk.getDetailRowCount(detailMark);

 
5.5 获取明细行下标，根据明细行IdgetDetailRowSerailNum(detailMark: string, rowId: string): string;
参数说明
detailMark：string，必需，明细表Id，明细表标识
rowId：string，必需，明细表Id、rowId

返回值
string

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段fieldId
    const detailMark = weFormSdk.convertFieldNameToId("mxbo16sr2");
    // 这是结果的所在行下标：3
    const detailRowStr = weFormSdk.getDetailRowSerailNum(detailMark,"805922304979501066");

5.6 添加明细时默认复制最后一行记录setDetailAddUseCopy(detailMark: string, needCopy: boolean): void;
参数说明
detailMark：string，必需，明细表Id、明细表标识
needCopy：boolean，是否需要启用复制，true：启用；false：不启用

返回值
string
示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段fieldId
    const detailMark = weFormSdk.convertFieldNameToId("mxbo16sr2");
    // 复制最后一行
    weFormSdk.setDetailAddUseCopy(detailMark, true);
5.7 根据明细行标识和rowIndex下标，获取rowId行号getDetailRowIdByIndex: (detailMark: string, rowIndex: number) => string;
参数说明
detailMark：string，必需，明细表Id、明细表标识
rowIndex：number，必需，明细行下标，从1开始，如：1、2、3…；注：按照显示顺序来

返回值
string
示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段fieldId
    const detailMark = weFormSdk.convertFieldNameToId("mxbo16sr2");
    // 获取第一行的rowId
    const oneRowId = weFormSdk.getDetailRowIdByIndex(detailMark, 1);
5.8 根据明细行标识和rowId行号，获取rowIndex下标getDetailIndexByRowId: (detailMark: string, rowId: string) => string;
参数说明
detailMark：string，必需，明细表Id，明细表标识
rowId：string，必需，明细行Id、rowId

返回值
string
示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段fieldId
    const detailMark = weFormSdk.convertFieldNameToId("mxbo16sr2");
    // 获取明细行Id的下标位置
    const rowIndex = weFormSdk.getDetailIndexByRowId(detailMark, '805922304979501066');

5.9 选中明细指定行/全部行checkDetailRow(detailMark: string, rowIndexMark: string | undefined, needClearBeforeChecked: boolean | undefined): void;
说明
此方法可灵活使用，依靠参数needClearBeforeChecked可实现清除选中的逻辑
参数说明
detailMark：string，必需，明细表Id、明细表标识
rowIndexMark：string，必需，需要选中的行标识，选中全部行：all，选中部分行：”805922304979501066,805922304979501067,805922304979501068”
needClearBeforeChecked：boolean，是否需要清除已选

返回值
void
示例
   // 此方法可灵活使用，依靠参数needClearBeforeChecked可实现清除选中的逻辑   // 获取表单实例
   const weFormSdk = window.WeFormSDK.getWeFormInstance();
   // 明细表id
   const detailMark = weFormSdk.convertFieldNameToId('shm_glsj_mxb1');
   // 选中所有行
   weFormSdk.checkDetailRow(detailMark, "all");
 
   // 获取第1行rowId
   const oneRowId = weFormSdk.getDetailRowIdByIndex(detailMark, 1);
   // 选中第一行
   weFormSdk.checkDetailRow(detailMark, oneRowId, true);
   // 根据rowId选中指定行
   weFormSdk.checkDetailRow(detailMark, '167954015280618401,167954015280624841');
   // 清空其他行且选中当前传入的两行
   weFormSdk.checkDetailRow(detailMark, '167954015280618401,167954015280624841', true);
   // 清空所有行
   weFormSdk.checkDetailRow(detailMark, '', true);

5.10 获取明细选中行下标getDetailCheckedRowIndexStr(detailMark: string): string;
参数说明
detailMark：string，必需，明细表Id，明细表标识

返回值
string
示例
   // 获取表单实例
   const weFormSdk = window.WeFormSDK.getWeFormInstance();
   // 明细表id
   const detailMark = weFormSdk.convertFieldNameToId('shm_glsj_mxb1');
   // 选中指定行, 注: rowId需要先获取
   weFormSdk.checkDetailRow(detailMark, '167954015280618401,167954015280624841', true);
   // 获取选中行的rowId;result: 167954015280618401,167954015280624841
   weFormSdk.getDetailCheckedRowIndexStr(detailMark)

5.11 控制明细数据行的显示及隐藏controlDetailRowDisplay(detailMark: string, rowIndexMark: string, needHide: boolean): void
说明
只是界面效果隐藏，序号不会变化，即被隐藏行的前后行序号会断层不连续
参数说明
detailMark：string，必需，明细表Id，明细表标识
rowIndexMark：string，必需，需要控制的行标示，全部行：all；部分行：”805922304979501066,805922304979501067,805922304979501068”
needhide：string，必需，是否隐藏行，true：隐藏；false：显示

返回值
void
示例
   // 获取表单实例
   const weFormSdk = window.WeFormSDK.getWeFormInstance();
   // 明细表id
   const detailMark = weFormSdk.convertFieldNameToId('shm_glsj_mxb1');
   // 设置行隐藏
   weFormSdk.controlDetailRowDisplay(detailMark, '167954015280618401,167954015280624841', true);

5.12 设置明细表顶部操作菜单setDetailTopAction: (detailMark: string, actions: TableActionType[]) => void
说明
设置明细表顶部操作菜单
参数说明
detailMark：string，必需，明细表Id，明细表标识
actions：TableActionType[]，必需，菜单列表

TableActionType
id：string，必需，唯一标识，要符合react语法
type：string，类型，理论上与id相同
title：string：标题
icon：object，图标对象，格式如：{path：图标路径，需符合AssetsItem的格式，style：图标样式}
mode：string，必需，可选值为“icon”（仅图标）、“text”（仅文字）、“both”（图标+文字）
onClick：string，点击事件处理函数，无参数
customRender：string，自定义渲染函数，接受一个reactNode参数并返回一个ReactNode

返回值
void
示例
   // 获取表单实例
   const weFormSdk = window.WeFormSDK.getWeFormInstance();
   // 明细表id
   const detailMark = weFormSdk.convertFieldNameToId('shm_glsj_mxb1');
   // 设置明细表菜单
   weFormSdk.setDetailTopAction(detailMark, [{id: 'btn',  type: 'btn', title: 'BTN', mode:"text"},{id: 'custom',  type: 'custom', customRender:()=> React.createElement("div", {}, "BTN2")}]);

6.1 获取当前打开表单的基础信息getBaseInfo: () => Object;
参数说明
无
返回值
object
示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    const formInfo = weFormSdk.getBaseInfo();
    console.log(formInfo);

6.2 可控制显示时间的message信息showMessage(msg: string, type?: number, duration?: number, isStatic?: boolean): void;
参数说明
msg：string，必需，提示信息内容
type：number，必需，提示类型，1（警告）、2（错误）、3（成功），默认为1，不同类型提示信息效果不同
duration：number，必需，多长时间自动消失，单位秒，默认为1.5秒

返回值
字段id
示例
    // 普通提示
    window.WeFormSDK.showMessage("This is a success prompt", 3, 2);

6.3 系统样式的Confirm确认框showConfirm(content: string, okEvent?: () => void, cancelEvent?: () => void, otherInfo?: Object, isStatic?: boolean): void;
参数说明
content：string，必需，确认信息
okEvent：Function，必需，点击确认事件
cancelEvent：Function，点击取消事件
otherInfo：object，自定义信息（按钮名称）

返回值
无
示例
//弹确认框的title，仅PC端有效window.WeFormSDK.showConfirm("This is a secondary confirmation box",
            () => {
                // Click to confirm the callback
            }, () => {
                // Click to cancel the callback
            }, {
                title: "Information confirmation", 
                okText: "ok",                  
                cancelText: "cancel"           
            }
);

6.4 自定义弹框openCustomDialog(prop:any): any;
参数说明
content：string，object，必需，弹窗展示内容，字符串或DOM
icon：string，弹窗图标
style：object，自定义样式
footer：any[]，底部按钮DOM，多个，有值不在出现默认按钮
onOk：function，点击确认事件，点击会自动关闭，默认确认按钮的事件
onCancel：function，点击取消事件，点击会默认关闭，默认确认按钮的事件
width：string，number，宽度
height：string，number，高度
top：string，number，顶部距离
bottom：string，number，底部距离
left：string，number，左侧距离
right：string，number，右侧距离

返回值
参数 | 类型 | 说明 || --- | --- | --- | | destroy | Function | 销毁弹框 |
示例
const onClickCreate = () => console.log("create");
const onClickSave = () => console.log("save");
const onClickCancel = () => dialogComponent?.destroy();
 
const dialogComponent = window.WeFormSDK.openCustomDialog({
      content: "This is the pop-up content",
      width: "500px",
      height: "500px"
});
6.5 刷新表单页面reloadPage: (params?: any) => void;
参数说明
params：object，自定义参数，覆盖默认参数ID

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    weFormSdk.reloadPage();

6.6 扩展提交操作发送给服务端的参数appendSubmitParam: (params?: any) => void;
参数说明
params：object，自定义参数，覆盖默认参数ID

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    weFormSdk.appendSubmitParam({customParam: {type: "demo"}});
6.7 触发一次必填验证verifyFormRequired: (mustAddDetail?: Boolean, fieldRequired?: Boolean) => any;
参数说明
mustAdDetail：boolean，自是否校验必须新增空明细，默认为是
fieldRequired：boolean，是否校验字段必填，默认为是

示例
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 触发一次必填验证
    weFormSdk.verifyFormRequired();
6.8 页面全局LoadinggetLoadingGlobal: () => any;
参数说明

示例
// 启用遮罩loading
WeFormSDK.getLoadingGlobal().start();
// 停止遮罩loading
WeFormSDK.getLoadingGlobal().end();
// 销毁遮罩loading
WeFormSDK.getLoadingGlobal().destroy();
//具体使用根据业务场景需求，正常使用可以直接调用1、3就可以
6.9 控制表单关闭提示状态setFormTipCloseStatus: (open: boolean) => void;
参数说明
open：boolean，简单，false为关闭弹窗框提示，true为打开提示，默认为true

效果
    // 获取表单实例
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 关闭弹框提示
    weFormSdk.setFormTipCloseStatus(false);
6.11 是否移动端，true表示是e-mobile、微信、钉钉等移动终端，false表示PC端isMobile(): boolean;

效果
    // 方式1，通过对象静态方法调用，返回根据环境的检查
    window.WeFormSDK.isMobile()
    // 方式2，通过表单实例的调用，返回表单的isMobile属性
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    weFormSdk.isMobile();
7.1 扩展浏览按钮取数接口参数值appendBrowserDataUrlParam: (fieldMark: string, jsonParam: any) => void;
fieldMark：string，必需，字段id，字段标识，格式为：{字段Id}、{字段Id}_{明细行Id}
jsonParam：对象，简单，扩展的url参数

效果
    const weFormSdk = window.WeFormSDK.getWeFormInstance();
    // 获取主表字段fieldId
    const fieldMark = weFormSdk.convertFieldNameToId("llan");
    // 扩展参数otherParam{type: "other"}
    weFormSdk.appendBrowserDataUrlParam(fieldMark, {otherParam: {type: "other"}});
7.2 获取浏览按钮选项Id值 getBrowserOptionId: (fieldMark: string, splitChar?: string) => string;
参数说明
fieldMark：string，必需，字段Id，字段标识，格式为：{字段Id}、{字段Id}_{明细行Id}
splitChar：字符串，简单，分隔符，默认是[,]

返回值
细绳
效果
   const weFormSdk = window.WeFormSDK.getWeFormInstance();
   // 获取主表字段fieldId
   const fieldMark = weFormSdk.convertFieldNameToId("llan");
   // 获取选中的浏览的id
   const browserIdStr = weFormSdk.getBrowserOptionId(fieldMark , ",");
7.3 获取浏览按钮的显示值 getBrowserShowName: (fieldMark: string, splitChar?: string) => string;
参数说明
fieldMark：string，必需，字段Id，字段标识，格式为：{字段Id}，{字段Id}_{明细行Id}
splitChar：字符串，简单，分隔符，默认是[,]

返回值
细绳
效果
   const weFormSdk = window.WeFormSDK.getWeFormInstance();
   // 获取主表字段fieldId
   const fieldMark = weFormSdk.convertFieldNameToId("llan");
   // 获取选中的浏览的名称
   const browserNameStr = weFormSdk.getBrowserShowName(fieldMark , ",");
7.4 删除选择框字段选项removeSelectOption: (fieldMark: string, optionKeys: string) => void;
参数说明
fieldMark：string，必需，字段Id，字段标识，格式为：{字段Id}，{字段Id}_{明细行Id}
optionKeys：字符串，简单，需要删除option选项键值，多个以分隔分隔

效果
   const weFormSdk = window.WeFormSDK.getWeFormInstance();
   // 获取主表字段fieldId
   const fieldMark = weFormSdk.convertFieldNameToId("fxk");
   // 移出选中的选项
   weFormSdk.removeSelectOption(fieldMark, '845584790598795269,845584790598795270');
7.5 获取选择框字段的显示值 getSelectShowName: (fieldMark: string, splitChar?: string) => string;
参数说明
fieldMark：string，必需，字段Id，字段标识，格式为：{字段Id}，{字段Id}_{明细行Id}
splitChar：字符串，需符分隔，默认是[,]

返回值
细绳
效果
   const weFormSdk = window.WeFormSDK.getWeFormInstance();
   // 获取主表字段fieldId
   const fieldMark = weFormSdk.convertFieldNameToId("fxk");
   // 获取显示的选项名称
   const selectNameStr = weFormSdk.getSelectShowName(fieldMark , ",");
7.6 控制选择框字段选项controlSelectOption: (fieldMark: string, optionKeys: string) => string;
参数说明
fieldMark：string，必需，字段Id，字段标识，格式为：{字段Id}，{字段Id}_{明细行Id}
optionKeys：string，必需，显示的option选项key值，多个以逗号分隔；注：如果是明细行，不指定行则列生效

返回值
string
示例
   const weFormSdk = window.WeFormSDK.getWeFormInstance();
   // 获取主表字段fieldId
   const fieldMark = weFormSdk.convertFieldNameToId("fxk");
   // 控制仅显示这两个选项
   weFormSdk.controlSelectOption(fieldMark, '845584790598795269,845584790598795270')


7.7 获取浏览数据、浏览选项对象getBrowserOptionEntity: (fieldMark: string) => any[];
参数说明
fieldMark：string，必需，字段Id，字段标识，格式为：{字段Id}，{字段Id}_{明细行Id}

返回值
string
示例
   const weFormSdk = window.WeFormSDK.getWeFormInstance();
   // 获取主表字段fieldId
   const fieldMark = weFormSdk.convertFieldNameToId("fxk");
   // 获取选项数组， 对象结构: [{id:'xxx', name: 'xxx'}]; 结构同3.3的specialObj入参结构
   const optionList = weFormSdk.getBrowserOptionEntity(fieldMark)
7.8 控制日期组件的可选日期范围controlDateRange(fieldMark: string, start: string | number, end?: string | number) => void;
参数说明
fieldMark：string，必需，字段Id，字段标识，格式为：{字段Id}、{字段Id}_{明细行Id}
start：string，必需，支持两种格式，第一种标准的日期格式，比如2019-05-28，第二种整数，相比于当前日期往前/后多少天
end：string，支持两种格式，第一种标准的日期格式，比如2019-05-28，第二种整数，相比于当前日期往前/后多少天

返回值
void
示例
   const weFormSdk = window.WeFormSDK.getWeFormInstance();
   // 获取主表字段fieldId
   const fieldMark = weFormSdk.convertFieldNameToId("fxk");
   // 控制日期范围, 为当前日期前5天, 至当前日期后3天
   WeFormSDK.getWeFormInstance().controlDateRange(fieldMark, 5, 3);
   // 控制日期范围, 为2023-08-20, 2023-08-25
   WeFormSDK.getWeFormInstance().controlDateRange(fieldMark, '2023-08-20', '2023-08-25');


